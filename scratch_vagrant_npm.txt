Thu Jul 27 22:20:21 UTC 2017

Build the pxt-adafruit environment from scratch, on Linux
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

by wa1tnr

Well, not from scratch.

   To make an apple pie from scratch, first you must create the Universe.
   --Carl Sagan (paraphrased?)


from scratch (as it were):
  Prerequisites: virtualbox and vagrant.  See the beginning of

    [ https://learn.adafruit.com/micropython-for-samd21/build-firmware ]

The attempt is to build a virtual machine that runs pxt-adafruit,
inside that machine. /shrug  /might_work_who_knows

This is the basic process being followed, much later on, after
a vagrant-thing is ready to accept software and github repo
cloning:

    [ https://github.com/Microsoft/pxt-adafruit/blob/master/README.md ]


I. vagrant preparations

  a. install virtualbox and vagrant, per Tony DiCola's URI, above (https://learn...build-firmware).

  18:30z:

  b. clone the atmel-samd-micropython-vagrant stuff (from github) needed, in
     order to build the virtualbox/vagrant thing.

      $ cd ~ ; mkdir MkeC_BUILD # mnemonic for 'build MakeCode'

      $ cd MkeC_BUILD/ # this is where one imitates what Tony DiCola did when
                       # he cloned the SAMD21 MicroPython Vagrant configuration
                       # repository

      $ git clone https://github.com/adafruit/atmel-samd-micropython-vagrant.git
      $                # yes, follow Tony's guide verbatim for this repository.

      $ /bin/pwd; ls -la # confirmation - optional.

     /home/mylogin/MkeC_BUILD

     total 20
     drwxr-xr-x  3 mylogin mylogin  4096 Jul 27 18:37 .
     drwxr-xr-x 99 mylogin mylogin 12288 Jul 27 18:36 ..
     drwxr-xr-x  3 mylogin mylogin  4096 Jul 27 18:37 atmel-samd-micropython-vagrant

     Enter the newly-created directory (the git clone line created one, and populated it):

      $ cd atmel-samd-micropython-vagrant

     Quoting Tony,

         Inside this directory is a text file called Vagrantfile.
         This file is the configuration for the virtual machine
         and also is the location where all vagrant commands should
         be run.

  18:46z
  c. edit the Vagrantfile found here, if required.  Big if -- looking now.

     i. I commented out line 56, which now reads:

     56     # vb.customize ["usbfilter", "add", "0", "--target", :id, "--name", "Adafruit M0 Bootlo

     Doesn't seem likely this line will do any good for present uses.
     Perhaps a modification to it (later) is in order.

     ii. I edited line 79 to include iceweasel (Firefox/Mozilla) as a lark, to
         see how outrageous a request that is.

     79     sudo apt-get install -y iceweasel build-essential git linux-image-extra-$(uname -r) lib

         If it works, that implies a GUI environment inside the virtualbox/vagrant
         may function -- doubt it, but worth a try.

  d. make a Log directory; change to it; begin 'script' to log the mess that
     may arise from trying to provision a VM with iceweasel:

      $ cd ~/MkeC_BUILD; mkdir Log.d; cd Log.d; /bin/pwd
     /home/mylogin/MkeC_BUILD/Log.d

  e. start /usr/bin/script
      $ script
     Script started, file is typescript

      $ /bin/pwd
     /home/mylogin/MkeC_BUILD/Log.d

      $ ls -la
     total 8
     drwxr-xr-x 2 mylogin mylogin 4096 Jul 27 18:59 .
     drwxr-xr-x 4 mylogin mylogin 4096 Jul 27 18:57 ..
     -rw-r--r-- 1 mylogin mylogin    0 Jul 27 18:59 typescript

     The system now records the session to disk in the typescript file.
     It's just a transcript of what was seen in the xterm (or other
     shell) window (or Linux Virtual Console).

  f. change directory to the vagrant directory

      $ cd ../atmel-samd-micropython-vagrant/

      $ /bin/pwd
     /home/mylogin/MkeC_BUILD/atmel-samd-micropython-vagrant

     Quoting Tony (second quote),

         Make sure you're inside this atmel-samd-micropython-vagrant
         directory with the Vagrantfile before running vagrant commands.


II. vagrant - run it once
  a. ch
  a. provision the virtual machine (CAUTION: much is done automatically)

      $ vagrant up  # this is also used repeatedly, in your workflow cycle, later on

     Bringing machine 'default' up with 'virtualbox' provider...
     ==> default: Importing base box 'ubuntu/trusty64'...

     Note that you can watch what's going on, by starting a new session,
     cd to that Log.d directory, and by typing:

      $ tail -f ./typescript

     Or you could use the 'less' $PAGER to look at the (growing) log file:

      $ less    ./typescript

     Note: Firefox was installed; the error when trying to launch was:

     host $ vagrant ssh

     vagrant@vagrant-ubuntu-trusty-64:~$ which firefox
     /usr/bin/firefox
     vagrant@vagrant-ubuntu-trusty-64:~$ /usr/bin/firefox 
     Error: GDK_BACKEND does not match available displays
     vagrant@vagrant-ubuntu-trusty-64:~$ 



Now.

 [ https://makecode.com/cli ] says node.js is needed:

 [ https://nodejs.org/en/ ]

so that is (after 'vagrant ssh'):

 vagrant@vagrant-ubuntu-trusty-64:~$ export PS1="vagrant $ "  # entirely optional, pretty prompt $PS1

 vagrant $ cd; mkdir downloads.d ; cd downloads.d

 vagrant $ wget https://nodejs.org/dist/v6.11.1/node-v6.11.1-linux-x64.tar.xz

2017-07-27 21:25:24 (742 KB/s) - ‘node-v6.11.1-linux-x64.tar.xz’ saved [9252484/9252484]

 vagrant $ xz -l node-v6.11.1-linux-x64.tar.xz 

This next one is an extraction of the entire .xz tarball, to the current directory:

 vagrant $ xzcat node-v6.11.1-linux-x64.tar.xz | tar -xvf -

 vagrant $ cd node-v6.11.1-linux-x64/
 vagrant $ /bin/pwd
 /home/vagrant/downloads.d/node-v6.11.1-linux-x64
 vagrant $ 

 hmm. npm seems present in this package.

 Now, intstalling via package manager:

  [ https://nodejs.org/en/download/package-manager/ ]

 So, change of plan.  Ignore the recent download of the node-v6..tar.xz file,
 and leverage the package manager (apt-get) in Ubuntu (the VM).

 vagrant $ curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -

 You get dumped out to this instruction (with a line or two of context):

   Ign http://archive.ubuntu.com trusty/restricted Translation-en_US              
   Ign http://archive.ubuntu.com trusty/universe Translation-en_US                
   Fetched 6,356 B in 7s (880 B/s)                                                
   Reading package lists... Done
 
   ## Run `apt-get install nodejs` (as root) to install Node.js v6.x and npm

 NOTE THAT IT SAYS 'and npm' there.  Yes, this installs npm (which is used a *lot*).

 vagrant $ sudo apt-get install -y nodejs

   Reading package lists... Done
   The following NEW packages will be installed:
     nodejs
   0 upgraded, 1 newly installed, 0 to remove and 29 not upgraded.
   Need to get 9,836 kB of archives.
   After this operation, 50.1 MB of additional disk space will be used.

   .. and so on.

   Setting up nodejs (6.11.1-2nodesource1~trusty1) ...

 [ https://makecode.com/cli ] also says yotta is needed.

 yotta is a github repository. Repeatedly, google found the
 answer to what is needed next, at github (this applies to
 jake, 'typings' and probably other repos; one shall see as
 this document progresses).

 So then, there's

 [ http://docs.yottabuild.org/#installing-on-linux ]

 Now we're looking at satisfying yotta's dependencies.

 This is where pip comes into it -- pip is like its own
 package manager, complete with bar graphs as it does
 massive downloading.  THIS IS WHY I went with a VM,
 and why I'd prefer the whole makecode.adafruit.com
 (pxt-adafruit) weren't on my primary hard disk -- too
 promiscuous for me (by far).

 Lot of third-party stuff here that's not from an official
 Debian repository.  And stuff that won't install without
 sudo (or whatever work-arounds are published) (somewhere).

 docs.yottabuild.org says:

 $ sudo apt-get update && sudo apt-get install python-setuptools  cmake build-essential ninja-build python-dev libffi-dev libssl-dev && sudo easy_install pip

 I'd do the apt-get update as a separate step. And add a -d to 'apt get install': apt-get -d install .. to do that line.

Here's my version:

 $ sudo apt-get update

 $ sudo apt-get -d install \
        python-setuptools  cmake build-essential ninja-build \
        python-dev libffi-dev libssl-dev

 $ sudo apt-get    install \
        python-setuptools  cmake build-essential ninja-build \
        python-dev libffi-dev libssl-dev

 $ # sudo easy_install pip # do later .. not now

 Just join the lines together where the \ characters are (and remove them) or paste as-is.

Partial Transcript:

vagrant $ sudo apt-get -d install \
>         python-setuptools  cmake build-essential ninja-build \
>         python-dev libffi-dev libssl-dev
Reading package lists... Done
Building dependency tree       
Reading state information... Done
build-essential is already the newest version.
libffi-dev is already the newest version.
The following extra packages will be installed:
  cmake-data libarchive13 libexpat1 libexpat1-dev liblzo2-2 libnettle4
  libpython-dev libpython2.7-dev libssl-doc python2.7-dev zlib1g-dev
Suggested packages:
  codeblocks eclipse lrzip
The following NEW packages will be installed:
  cmake cmake-data libarchive13 libexpat1-dev liblzo2-2 libnettle4
  libpython-dev libpython2.7-dev libssl-dev libssl-doc ninja-build python-dev
  python-setuptools python2.7-dev zlib1g-dev
The following packages will be upgraded:
  libexpat1
1 upgraded, 15 newly installed, 0 to remove and 28 not upgraded.
Need to get 28.7 MB of archives.
After this operation, 62.4 MB of additional disk space will be used.
Do you want to continue? [Y/n]
.
.
Get:15 http://archive.ubuntu.com/ubuntu/ trusty/main python-dev amd64 2.7.5-5ubuntu3 [1,166 B]
Get:16 http://archive.ubuntu.com/ubuntu/ trusty-updates/main python-setuptools all 3.3-1ubuntu2 [230 kB]
Fetched 28.7 MB in 41s (699 kB/s)                                              
Download complete and in download only mode


 # REPEATED INFORMATION ONLY:  vagrant $ sudo apt-get -d install python-setuptools cmake build-essential ninja-build python-dev libffi-dev libssl-dev

Inspect.  Then:

            #           -d missing; is the -download only switch (and therefore, this time, all these are installed):
 vagrant $ sudo apt-get    install python-setuptools cmake build-essential ninja-build python-dev libffi-dev libssl-dev


Install pip, after (optionally) inspecting the download session.

 vagrant $ sudo easy_install pip




That concludes the http://docs.yottabuild.org/#dependencies-linux part of this.




 . . .


YOTTA installation

 [ http://docs.yottabuild.org/#yotta-itself-linux ]

Looks like pip installs yotta.

 vagrant $ sudo -H pip install yotta # oh dear god

Now this was a big mistake, to pass on this (see immediately
below) the last time this stuff got installed (not on a VM).

Will take advantage of it, here and now:

 [ http://docs.yottabuild.org/#yotta-itself-linux ]

  quote: "You can use the following commands to allow the current user to override module dependencies using yotta link without sudo:"

    sudo mkdir -p /usr/local/lib/yotta_modules
    sudo chown $USER /usr/local/lib/yotta_modules
    chmod 755 /usr/local/lib/yotta_modules

This will hopefully allow future software packages (mostly
from github, if I understand things correctly) .. to be
installed without resorting to sudo.


CROSS-COMPILER foo

This DID get done the last time:

 [ http://docs.yottabuild.org/#linux-cross-compile ]

The eabi stuff is what Arduino IDE uses, but it was assumed
that was in a private directory.

Ubuntu-specific (not done for Debian host; will be done here):

vagrant $ # remove the built-in package, if installed:
vagrant $ sudo apt-get remove binutils-arm-none-eabi gcc-arm-none-eabi
Reading package lists... Done
Building dependency tree       
Reading state information... Done
Package 'binutils-arm-none-eabi' is not installed, so not removed
Package 'gcc-arm-none-eabi' is not installed, so not removed
0 upgraded, 0 newly installed, 0 to remove and 28 not upgraded.
vagrant $ 

# set up the PPA for the ARM-maintained package:
$ sudo add-apt-repository ppa:team-gcc-arm-embedded/ppa

(There's a long message printed to the screen)

$ sudo apt-get update

$ sudo apt-get install gcc-arm-embedded


The website says

    To use this compiler, you’ll need to select a supported cross-compilation target, such as frdm-k64f-gcc, by running yotta target frdm-k64f-gcc before building.

Not sure what to make of that; ignoring.

Sanity Checks

 vagrant $ pip -V
pip 9.0.1 from /usr/local/lib/python2.7/dist-packages/pip-9.0.1-py2.7.egg (python 2.7)
vagrant $ 



 - - - - - - - - - - - - - - - - - - - - - - - - 



 So (still with us?) it'll be tentatively assumed that the
 next section (scroll down) obtains; that this thing is
 ready to rip.

 The npm stuff.  Beginning with the 'git clone' stuff.

 Mister pxt.git  stuff.

 One shall see and experience (let's not get carried away with appending 'believe' to that).

CONTINUE EDITING HERE.  23:06z 27 July.
###bookmark


 - - - - - - - - - - - - - - - - - - - - - - - - 

 [ https://makecode.com/cli ]

 [ https://github.com/Microsoft/pxt-adafruit/blob/master/README.md ]


 - - - - - - - - - - - - - - - - - - - - - - - - 

Now this guy here says:

 [ https://makecode.com/cli ]

$ npm install -g pxt

But that seems bogus (redundant).  And it's just floating in
space, with no context.


 - - - - - - - - - - - - - - - - - - - - - - - - 


III.

npm stuff from 

    [ https://github.com/Microsoft/pxt-adafruit/blob/master/README.md ] REPEATED URI, FROM ABOVE

cd ; mkdir pxt-m; cd pxt-m/ # arbitrary top level directory name

git clone https://github.com/typings/typings.git
git clone https://github.com/jakejs/jake.git
git clone https://github.com/Microsoft/pxt.git
git clone https://github.com/Microsoft/pxt-common-packages.git
git clone https://github.com/Microsoft/pxt-adafruit.git

cd    pxt

sudo  npm      install
sudo  npm      rebuild   node-gyp  -g
sudo  typings  install

cd ../pxt-common-packages/

sudo  npm      install
sudo  npm      rebuild   node-gyp  --global
sudo  npm      link      ../pxt

sudo  npm      rebuild   node-gyp  --global  # yes, iterate these two twice
sudo  npm      link      ../pxt

cd ../pxt-adafruit/

sudo  npm      install
sudo  npm      rebuild   node-gyp  --global
sudo  npm      link      ../pxt
sudo  npm      link      ../pxt-common-packages

cd ../jake/
sudo  npm      install

cd ../typings/
sudo  npm      install

cd ../

sudo  pxt      target    adafruit
sudo  npm      rebuild   node-gyp  --global
sudo  pxt      target    adafruit  # yes, iterate this twice


cd ./pxt/
sudo ../jake/jake

export PATH=$PATH:/home/mylogin/pxt-m/jake

cd ./pxt-adafruit/
serve --cloud



What's missing are at least one soft link, and a chmod to make $HOME/pxt-m/jake/jake an executable script.

 $ /bin/pwd
/home/mylogin/pxt-m/jake/node_modules/jake
 $ ls -la | egrep bin
lrwxrwxrwx  1 root root    9 Jul 27 03:30 bin -> ../../bin
 $ 


And a $PATH modification to include $HOME/pxt-m/jake in the path.

// commands to install pxt-adafruit, based on:

https://github.com/Microsoft/pxt-adafruit/blob/master/README.md

Sample JavaScript (didn't run correctly):

https://makecode.com/_e1dTaV2eHUtD

Thu Jul 27 22:20:21 UTC 2017
